
This example shows the mem_with_stall protocol usage.
This protocol is used to model a RAM that has a stall signal originating from the RAM.

The protocol transactors convert normal Connections Push/Pop operations into
the memory protocol. This allows the memory to be used within processes that
Catapult is pipelining . When this is done, the memory stall will properly stall
the Catapult pipeline.

This example is a good illustration of the ability to explicitly model arbitrary
HW logic and protocols in SystemC that differs from typical HLS models. It also
shows how to explicitly model RAM types that differ from those natively supported by HLS tools.

Note that a "cycle set" directive is used in go_hls.tcl to separate the memory read operation (Pop)
from the memory write operation (Push). 
This is needed to enable the pipeline to achieve full throughput.
To see the full throughput of the design, disable the "do_stall" flag within the testbench.
When this is done, the post-HLS RTL model will support both read and write operations 
on every clock cycle (II=1). However, the pre-HLS model will not show full throughput for the
read operations (would require additional buffering for read ops in pre-HLS model to account
for the HLS pipeline).


Steps:

1. Build the SystemC simulation executable by typing:
   make build

2. Run the SC simulation by typing:
   ./sim_sc

3. View the waveforms generated from the SC simulation:
   make view_wave

4. Run Catapult HLS to generate Verilog RTL for DUT:
   catapult -f go_hls.tcl

5. Launch SCVerify / QuestaSim with generated RTL by typing in Catapult command line:
   dofile scverify.tcl

6. Run RTL Sim by typing in QuestaSim command line:
   run -all
   wave zoom full

7. View the RTL simulation waveforms and compare to SC waveforms before HLS synthesis

8. Delete all generated files
    make clean
