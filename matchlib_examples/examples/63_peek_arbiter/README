

Very simple Matchlib model showing Pre-HLS and Post-HLS simulations that demonstrates Matchlib Pop/Push operations.
Note that the SystemC model and the HLS generated RTL have a thruput of 1 NS (1 NS clock).

This example is very similar to example ../64_peek_arbiter_comb. 
It is recommended that you also look at that example to see an alternative implementation.

This particular example shows a "peek arbiter". The function of the arbiter is to arbitrate
between 2 inputs, and if both inputs are available, give priority to the input with the higher
data value. This requires that the arbiter is able to "peek" at some of the input data before it
consumes all of the data. Modeling this directly and synthesizing thru Catapult and 
achieving an II=1 is not possible,
since Catapult cannot create conditional IO like this with a single IO operation in the same cycle. 

This model solves this problem by splitting each of the 2 inputs into a "peek" channel and a
"data" channel. The peek channel contains only the data that the arbiter needs to see to
make its decision. The data channel contains all the other data.
The arbiter first consumes the data in the 2 peek channels, makes its decision about which
one to consume, and then consumes the data inputs. This approach enables the design
to be pipelined with an II=1 while getting good QOR (in particular the area and power costs
should be nearly optimal).


Steps:

1. Build the SystemC simulation executable by typing:
   make build

2. Run the SC simulation by typing:
   ./sim_sc

3. View the waveforms generated from the SC simulation:
   make view_wave

4. Run Catapult HLS to generate Verilog RTL for DUT:
   catapult -f go_hls.tcl

5. Launch SCVerify / QuestaSim with generated RTL by typing in Catapult command line:
   dofile scverify.tcl

6. Run RTL Sim by typing in QuestaSim command line:
   run -all
   wave zoom full

7. View the RTL simulation waveforms and compare to SC waveforms before HLS synthesis

8. Delete all generated files
    make clean
