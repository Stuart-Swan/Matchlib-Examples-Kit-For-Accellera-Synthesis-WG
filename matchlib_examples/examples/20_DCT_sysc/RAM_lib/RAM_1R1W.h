// INSERT_EULA_COPYRIGHT: 2020
#ifndef __INCLUDED_RAM_1R1W_H__
#define __INCLUDED_RAM_1R1W_H__

// SystemC memory model of RAM_1R1W
// Generated by Catapult memory generator
// Generated by:   rpoirier
// Generated date: Fri Jul 12 02:34:38 2019

// The following classes have been defined:
//     class RAM_1R1W a 0 delay "structural" model of the RAM

//     class RAM_1R1W_model<TLM/SYN>::mem<T,size,TLM/SYN>
//         A memory model that can be instanced and used for simulation and synthesis

//     class RAM_1R1W_model<TLM/SYN>::wr1_port<T,size,TLM/SYN>
//         a model of an external port with write capability

//     class RAM_1R1W_model<TLM/SYN>::rd0_port<T,size,TLM/SYN>
//         a model of an external port with read capability

#include <ccs_types.h>
#ifndef NO_ASSERTS
#include <assert.h>
#endif

#pragma map_to_operator RAM_1R1W
template <
  int ram_id,
  int words,
  int width,
  int addr_width>
class RAM_1R1W : public sc_module
{
public:
  sc_in< bool >   CK;
  sc_in< bool >   RCSN;
  sc_in< bool >   WCSN;
  sc_in< sc_lv<addr_width> >   RA;
  sc_in< sc_lv<addr_width> >   WA;
  sc_in< sc_lv<width> >   D;
  sc_out< sc_lv<width> >   Q;

#if !defined(__SYNTHESIS__)
  sc_signal<sc_lv<width> > mem[words];
#endif

  SC_CTOR(RAM_1R1W) :
    CK("CK")
    ,RCSN("RCSN")
    ,WCSN("WCSN")
    ,RA("RA")
    ,WA("WA")
    ,D("D")
    ,Q("Q") {
    SC_METHOD(seq_proc_1);
    dont_initialize();
    sensitive << CK.pos();
  }

  void seq_proc_1() {
#if !defined(__SYNTHESIS__)
    int address;
    // write X
    if ((WCSN==0)) {
      vector_to_type( WA.read(), false, &address );
#if !defined(NO_ASSERTS) && !defined(__SYNTHESIS__)
      assert( address>=0 && address <words );
#endif
      mem[address] = D.read();
    }

    // read
    if ( (RCSN==0) ) {
      vector_to_type( RA.read(), false, &address );
#if !defined(NO_ASSERTS) && !defined(__SYNTHESIS__)
      assert( address>=0 && address <words );
#endif
      Q.write( mem[address] );
    } else { Q.write( sc_lv< width>() ); }

    // write
    if ((WCSN==0)) {
      vector_to_type( WA.read(), false, &address );
#if !defined(NO_ASSERTS) && !defined(__SYNTHESIS__)
      assert( address>=0 && address <words );
#endif
      mem[address] = D.read();
    }

#endif
  }

#if !defined(__SYNTHESIS__)
  // NOTE: this method is intended for use by testbenches only. It is not synthesizable!
  sc_lv< width> tb_read( int address ) const {
#ifndef NO_ASSERTS
    assert( address>=0 && address < words);
#endif
    return mem[address];
  }

  // NOTE: this method is intended for use by testbenches only. It is not synthesizable!
  void tb_write( int address, sc_lv<width> data ) {
#ifndef NO_ASSERTS
    assert( address>=0 && address < words);
#endif
    mem[address] = data;
  }

#endif
};

template <abstraction_t source_abstraction = AUTO>
class RAM_1R1W_model
{
public:
#if defined(__SYNTHESIS__)
  template <class T, unsigned int size, abstraction_t impl_abstraction = SYN> class mem {};
private:
  template <class T, unsigned int size, abstraction_t impl_abstraction = SYN> class wr1_local;
  template <class T, unsigned int size, abstraction_t impl_abstraction = SYN> class rd0_local;
public:
  template <class T, unsigned int size, abstraction_t impl_abstraction = SYN> class wr1_port;
  template <class T, unsigned int size, abstraction_t impl_abstraction = SYN> class rd0_port;

#elif defined (CCS_DUT_CYCLE) || defined (CCS_DUT_RTL)
  template <class T, unsigned int size, abstraction_t impl_abstraction = (source_abstraction==AUTO) ? SYN : source_abstraction>
  class mem {};
private:
  template <class T, unsigned int size, abstraction_t impl_abstraction = (source_abstraction==AUTO) ? SYN : source_abstraction>
  class wr1_local;
  template <class T, unsigned int size, abstraction_t impl_abstraction = (source_abstraction==AUTO) ? SYN : source_abstraction>
  class rd0_local;
public:
  template <class T, unsigned int size, abstraction_t impl_abstraction = (source_abstraction==AUTO) ? SYN : source_abstraction>
  class wr1_port;
  template <class T, unsigned int size, abstraction_t impl_abstraction = (source_abstraction==AUTO) ? SYN : source_abstraction>
  class rd0_port;

#else
  template <class T, unsigned int size, abstraction_t impl_abstraction = (source_abstraction==AUTO) ? P2P_DEFAULT_VIEW
            : source_abstraction> class mem {};
private:
  template <class T, unsigned int size, abstraction_t impl_abstraction = (source_abstraction==AUTO) ? P2P_DEFAULT_VIEW
            : source_abstraction> class wr1_local;
  template <class T, unsigned int size, abstraction_t impl_abstraction = (source_abstraction==AUTO) ? P2P_DEFAULT_VIEW
            : source_abstraction> class rd0_local;
public:
  template <class T, unsigned int size, abstraction_t impl_abstraction = (source_abstraction==AUTO) ? P2P_DEFAULT_VIEW
            : source_abstraction> class wr1_port;
  template <class T, unsigned int size, abstraction_t impl_abstraction = (source_abstraction==AUTO) ? P2P_DEFAULT_VIEW
            : source_abstraction> class rd0_port;

#endif

  // ***********************************************
  // TLM TLM TLM TLM TLM TLM TLM TLM TLM TLM TLM TLM
  //    This code is only for TLM simulation only
  // ***********************************************

  template <class T, unsigned int size>
  class mem <T,size,TLM>
  {
    enum {
      addr_width = nbits<size-1>::val,
      signedtype = mc_typedef_T_traits<T>::issigned,
      data_width = mc_typedef_T_traits<T>::bitwidth
    };
  public:
    void write (ac_int<addr_width,false> addr, T data=0) {
      wr1_port_instance.reset_chk.test();
#ifndef NO_ASSERTS
      assert( addr>=0 && addr<size );
#endif
      array[addr] = data;
    };

    T read ( ac_int<addr_width,false> addr ) {
#ifndef NO_ASSERTS
      assert( addr>=0 && addr<size );
#endif
      rd0_port_instance.reset_chk.test();
      return array[addr];
    }

    T &operator [] (unsigned int index) {
#ifndef NO_ASSERTS
      assert( index>=0 && index<size );
#endif
      return array[index];
    }

    const T &operator [] (unsigned int index) const {
#ifndef NO_ASSERTS
      assert( index>=0 && index<size );
#endif
      return array[index];
    }

    // NOTE: this method is intended for use by testbenches only. It is not synthesizable!
    T tb_read( int address ) const {
#ifndef NO_ASSERTS
      assert( address>=0 && address <size );
#endif
      return array[address];
    }

    // NOTE: this method is intended for use by testbenches only. It is not synthesizable!
    void tb_write( int address, T data ) {
#ifndef NO_ASSERTS
      assert( address>=0 && address <size );
#endif
      array[address] = data;
    }

  public:
    mem(const char *name)
      : wr1_port_instance(*this, ccs_concat(name,"wr1"))
      , rd0_port_instance(*this, ccs_concat(name,"rd0"))
    {}

    void reset_read() {
      rd0_port_instance.reset();
    }

    void reset_write() {
      wr1_port_instance.reset();
    }

    void CK(sc_in<bool> &CK_arg) {
      wr1_port_instance.clock_ok();
      rd0_port_instance.clock_ok();
    }
    void CK(sc_signal<bool> &CK_arg) {
      wr1_port_instance.clock_ok();
      rd0_port_instance.clock_ok();
    }

    wr1_local<T,size,TLM> wr1_port_instance;
    rd0_local<T,size,TLM> rd0_port_instance;
  private:
    T array[size];
    friend class wr1_local<T,size,TLM>;
    friend class rd0_local<T,size,TLM>;
  };

private:
  template <class T, unsigned int size>
  class wr1_local<T,size,TLM>
  {
    enum {
      addr_width = nbits<size-1>::val,
      signedtype = mc_typedef_T_traits<T>::issigned,
      data_width = mc_typedef_T_traits<T>::bitwidth
    };
    p2p_checker reset_chk;
    p2p_checker clock_chk;
    void clock_ok() {clock_chk.ok();}

  public:
    wr1_local (mem<T,size,TLM> &my_parent, const char *name)
      : reset_chk( name, "call reset()", "access this memory")
      , clock_chk( name, "bind the clock port", "access this memory")
      , parent(my_parent)
    {}

    void reset() {reset_chk.ok();}

    T &operator [] (int index) {
      reset_chk.test();
      clock_chk.test();
      return parent.array[index];
    }

    const T &operator [] (int index) const {
      reset_chk.test();
      clock_chk.test();
#ifndef NO_ASSERTS
      assert( index>=0 && index<size );
#endif
      return parent.array[index];
    }

    void write (ac_int<addr_width,false> addr, T data=0) {
      reset_chk.test();
      clock_chk.test();
#ifndef NO_ASSERTS
      assert( addr>=0 && addr<size );
#endif
      parent.array[addr] = data;
    };

  private:
    mem<T,size,TLM> &parent;
    friend class mem<T,size,TLM>;
  };

  template <class T, unsigned int size>
  class rd0_local<T,size,TLM>
  {
    enum {
      addr_width = nbits<size-1>::val,
      signedtype = mc_typedef_T_traits<T>::issigned,
      data_width = mc_typedef_T_traits<T>::bitwidth
    };
    p2p_checker reset_chk;
    p2p_checker clock_chk;
    void clock_ok() {clock_chk.ok();}

  public:
    rd0_local (mem<T,size,TLM> &my_parent, const char *name)
      : reset_chk( name, "call reset()", "access this memory")
      , clock_chk( name, "bind the clock port", "access this memory")
      , parent(my_parent)
    {}

    void reset() {reset_chk.ok();}

    const T &operator [] (int index) const {
      reset_chk.test();
      clock_chk.test();
#ifndef NO_ASSERTS
      assert( index>=0 && index<size );
#endif
      return parent.array[index];
    }

    T read ( ac_int<addr_width,false> addr ) {
      reset_chk.test();
      clock_chk.test();
#ifndef NO_ASSERTS
      assert( addr>=0 && addr<size );
#endif
      return parent.read(addr);
    }

  private:
    mem<T,size,TLM> &parent;
    friend class mem<T,size,TLM>;
  };

public:
  template <class T, unsigned int size>
  class wr1_port<T,size,TLM>
  {
    enum {
      addr_width = nbits<size-1>::val,
      signedtype = mc_typedef_T_traits<T>::issigned,
      data_width = mc_typedef_T_traits<T>::bitwidth
    };
    p2p_checker reset_chk;

    SC_VAR_NM(uint16_t, waddr, "wr1port");
    SC_VAR_NM(uint16_t, wdata, "wr1port");


  public:
    wr1_port(const char *name)
      : reset_chk(name, "call reset()", "access this port")
      , chan_ptr(0)
      , port_ptr(0)
    {}

    void write(unsigned int addr, T data ) {
      reset_chk.test();
      waddr = addr;
      wdata = data;
      // wait(3, SC_NS); // for tracing
      if ( bound_to_port ) { 
		port_ptr->write(addr,data); 
		} else {
		chan_ptr->write(addr,data); 
		}
    }

    T &operator [] (int index) {
      reset_chk.test();
      return (bound_to_port? (*port_ptr)[index] : (*chan_ptr)[index]);
    }

    void reset() {reset_chk.ok();}

    void operator() (wr1_local<T,size,TLM> &c) {
      chan_ptr = &c;
      c.reset(); // Supress reset error on bound memory
      bound_to_port = false;
    }

    void operator() (wr1_port<T,size,TLM> &c) {
      port_ptr = &c;
      c.reset(); // Supress reset error on bound port
      bound_to_port = true;
    }

    void operator() (mem<T,size,TLM> &m) {
      chan_ptr = &m.wr1_port_instance;
      chan_ptr->reset(); // Supress reset error on bound memory
      bound_to_port = false;
    }

  private:
    bool bound_to_port;
    wr1_local<T,size,TLM> *chan_ptr;
    wr1_port<T,size,TLM> *port_ptr;
  };

  template <class T, unsigned int size>
  class rd0_port<T,size,TLM>
  {
    enum {
      addr_width = nbits<size-1>::val,
      signedtype = mc_typedef_T_traits<T>::issigned,
      data_width = mc_typedef_T_traits<T>::bitwidth
    };
    p2p_checker reset_chk;

  public:
    rd0_port(const char *name)
      : reset_chk(name, "call reset()", "access this port")
      , chan_ptr(0)
      , port_ptr(0)
    {}

    T read(unsigned int addr) {
      reset_chk.test();
      if ( bound_to_port ) { 
		return port_ptr->read(addr); 
		} else { 
		return chan_ptr->read(addr); 
		}
    }

    const T &operator [] (int index) {
      reset_chk.test();
      return (bound_to_port? (*port_ptr)[index] : (*chan_ptr)[index]);
    }

    void reset() {reset_chk.ok();}

    void operator() (rd0_local<T,size,TLM> &c) {
      chan_ptr = &c;
      c.reset(); // Supress reset error on bound memory
      bound_to_port = false;
    }

    void operator() (rd0_port<T,size,TLM> &c) {
      port_ptr = &c;
      c.reset(); // Supress reset error on bound port
      bound_to_port = true;
    }

    void operator() (mem<T,size,TLM> &m) {
      chan_ptr = &m.rd0_port_instance;
      chan_ptr->reset(); // Supress reset error on bound memory
      bound_to_port = false;
    }

  private:
    bool bound_to_port;
    rd0_local<T,size,TLM> *chan_ptr;
    rd0_port<T,size,TLM> *port_ptr;
  };

  // ***********************************************
  // SYN SYN SYN SYN SYN SYN SYN SYN SYN SYN SYN SYN
  // Synthesis code
  // ***********************************************

private:
  template <class T, unsigned int size>
  class wr1_local<T,size,SYN>
  {
    enum {
      addr_width = nbits<size-1>::val,
      signedtype = mc_typedef_T_traits<T>::issigned,
      data_width = mc_typedef_T_traits<T>::bitwidth
    };
    p2p_checker reset_chk;
    p2p_checker clock_chk;
    class mem_ref
    {
    public:
      mem_ref( wr1_local<T,size,SYN> &my_parent, ac_int<addr_width,false> addr)
        : address(addr), parent(my_parent) {}

      inline mem_ref operator = ( T val ) {
        parent.write(address,val);
        return *this;
      }

      inline mem_ref operator = ( const mem_ref &val ) { return operator = ((T)val); }

    private:
      ac_int<addr_width,false> address;
      wr1_local<T,size,SYN> &parent;
    };

    void clock_ok() {clock_chk.ok();}

  public:
    wr1_local( const char *name)
      : reset_chk( name, "call reset()", "access this memory")
      , clock_chk( name, "bind the clock port", "access this memory")
      , WCSN(ccs_concat(name,"WCSN"))
      , WA(ccs_concat(name,"WA"))
      , D(ccs_concat(name,"D"))
    {}

//    SC_VAR_NM(uint16_t, waddr, "wr1port");
//    SC_VAR_NM(uint16_t, wdata, "wr1port");

#pragma remove_out_reg
#pragma design modulario
    void write (ac_int<addr_width,false> addr, T data=0) {
      reset_chk.test();
      clock_chk.test();
//     waddr = addr;
//      wdata = data;
      sc_lv<data_width> temp_data;
      type_to_vector(data, (signedtype?true:false), temp_data);
      sc_lv<addr_width> temp_addr;
      type_to_vector(addr, (signedtype?true:false), temp_addr);
      WCSN.write(0);
      WA.write( temp_addr );
      D.write( temp_data );
#pragma unroll
      for (int lcnt=0; lcnt<1; lcnt++) { wait(); }
#if defined(CALYPTO_SC)
      wait(); // Account for unreg outputs for SLEC
#elif !defined(__SYNTHESIS__)
      wait(0.3, SC_NS);  // Account for unreg outputs in simulation
#endif
      WCSN.write(1);
#if !defined(CALYPTO_SC)
      // Return outputs to don't care to save area
      sc_lv<data_width> dc;
      D.write( dc );
      WA.write( dc );
#endif
    }

    mem_ref operator [] (int index) {
      mem_ref write_ref(*this, index);
      return write_ref;
    }

    void reset() {
      WCSN.write(1);
      WA.write(sc_dt::Log_0);
      D.write(sc_dt::Log_0);
      reset_chk.ok();
    }

    SC_SIG(bool, WCSN);
    SC_SIG(sc_lv<addr_width>, WA);
    SC_SIG(sc_lv<data_width>, D);
    /*
        sc_signal< bool > WCSN;
        sc_signal< sc_lv<addr_width> > WA;
        sc_signal< sc_lv<data_width> > D;
    */
  private:
    friend class mem<T,size,SYN>;
  };

  template <class T, unsigned int size>
  class rd0_local<T,size,SYN>
  {
    enum {
      addr_width = nbits<size-1>::val,
      signedtype = mc_typedef_T_traits<T>::issigned,
      data_width = mc_typedef_T_traits<T>::bitwidth
    };
    p2p_checker reset_chk;
    p2p_checker clock_chk;
    class mem_ref
    {
    public:
      mem_ref( rd0_local<T,size,SYN> &my_parent, ac_int<addr_width,false> addr)
        : address(addr), parent(my_parent) {}

      operator T() const { return parent.read(address); }

      inline mem_ref operator = ( const mem_ref &val ) { return operator = ((T)val); }

    private:
      ac_int<addr_width,false> address;
      rd0_local<T,size,SYN> &parent;
    };

    void clock_ok() {clock_chk.ok();}

  public:
    rd0_local( const char *name)
      : reset_chk( name, "call reset()", "access this memory")
      , clock_chk( name, "bind the clock port", "access this memory")
      , RCSN(ccs_concat(name,"RCSN"))
      , RA(ccs_concat(name,"RA"))
      , Q(ccs_concat(name,"Q"))
    {}

#pragma remove_out_reg
#pragma design modulario
    T read (ac_int<addr_width,false> addr) {
      reset_chk.test();
      clock_chk.test();
      sc_lv<addr_width> temp_addr;
      type_to_vector(addr, (signedtype?true:false), temp_addr);
      RCSN.write(0);
      RA.write( temp_addr );
#pragma unroll
      for (int lcnt=0; lcnt<1; lcnt++) { wait(); }
#if defined(CALYPTO_SC)
      wait(); // Account for unreg outputs for SLEC
#elif !defined(__SYNTHESIS__)
      wait(0.3, SC_NS);  // Account for unreg outputs in simulation
#endif
      RCSN.write(1);
#if !defined(CALYPTO_SC)
      // Return outputs to don't care to save area
      sc_lv<data_width> dc;
      RA.write( dc );
#endif
      T return_data;
      vector_to_type(Q.read(), (signedtype?true:false), &return_data);
      return return_data;
    }

    mem_ref operator [] (int index) {
      mem_ref write_ref(*this, index);
      return write_ref;
    }

    void reset() {
      RCSN.write(1);
      RA.write(sc_dt::Log_0);
      reset_chk.ok();
    }

    sc_signal< bool > RCSN;
    sc_signal< sc_lv<addr_width> > RA;
    sc_signal< sc_lv<data_width> > Q;
  private:
    friend class mem<T,size,SYN>;
  };

public:
  template <class T, unsigned int size>
  class mem <T,size,SYN>
  {
    enum {
      addr_width = nbits<size-1>::val,
      signedtype = mc_typedef_T_traits<T>::issigned,
      data_width = mc_typedef_T_traits<T>::bitwidth
    };
    class mem_ref
    {
    public:
      mem_ref( mem<T,size,SYN> &my_parent, ac_int<addr_width,false> addr)
        : address(addr), parent(my_parent) {}

      operator T() const { return parent.read(address); }

      inline mem_ref operator = ( T val ) {
        parent.write(address,val);
        return *this;
      }

      inline mem_ref operator = ( const mem_ref &val ) { return operator = ((T)val); }

    private:
      ac_int<addr_width,false> address;
      mem<T,size,SYN> &parent;
    };

  public:
    mem ( const char *name)
      : RAM(ccs_concat(name, "RAM"))
      , wr1_port_instance(ccs_concat(name,"wr1"))
      , rd0_port_instance(ccs_concat(name,"rd0")) {
      RAM.WCSN(wr1_port_instance.WCSN);
      RAM.WA(wr1_port_instance.WA);
      RAM.D(wr1_port_instance.D);
      RAM.RCSN(rd0_port_instance.RCSN);
      RAM.RA(rd0_port_instance.RA);
      RAM.Q(rd0_port_instance.Q);
    }

    wr1_local<T,size,SYN> wr1_port_instance;
    rd0_local<T,size,SYN> rd0_port_instance;

    void CK(sc_in<bool> &CK_arg) {
      RAM.CK(CK_arg);
      wr1_port_instance.clock_ok();
      rd0_port_instance.clock_ok();
    }
    void CK(sc_signal<bool> &CK_arg) {
      RAM.CK(CK_arg);
      wr1_port_instance.clock_ok();
      rd0_port_instance.clock_ok();
    }


    T read ( ac_int<addr_width,false> addr ) {
      return rd0_port_instance.read( addr );
    }

    void write (ac_int<addr_width,false> addr, T data=0) {
      wr1_port_instance.write( addr, data );
    }

    mem_ref operator [] (int index) {
      mem_ref write_ref(*this, index);
      return write_ref;
    }

    void reset_read() {
      rd0_port_instance.reset();
    }

    void reset_write() {
      wr1_port_instance.reset();
    }

    // NOTE: this method is intended for use by testbenches only. It is not synthesizable!
    T tb_read(int address) const {
#ifndef NO_ASSERTS
      assert( address>=0 && address<size );
#endif
      T return_data;
      vector_to_type( RAM.tb_read(address), (signedtype?true:false), &return_data);
      return return_data;
    }

    // NOTE: this method is intended for use by testbenches only. It is not synthesizable!
    void tb_write( int address, T val) {
#ifndef NO_ASSERTS
      assert( address>=0 && address<size );
#endif
      sc_lv<data_width> temp_data;
      type_to_vector(val, (signedtype?true:false), temp_data);
      RAM.tb_write(address, temp_data);
    }

  private:
    RAM_1R1W<0, size, data_width, addr_width> RAM;
  };

  template <class T, unsigned int size>
  class wr1_port<T,size,SYN>
  {
    enum {
      addr_width = nbits<size-1>::val,
      signedtype = mc_typedef_T_traits<T>::issigned,
      data_width = mc_typedef_T_traits<T>::bitwidth
    };
    p2p_checker reset_chk;

    class mem_ref
    {
    public:
      mem_ref( wr1_port<T,size,SYN> &my_parent, ac_int<addr_width,false> addr)
        : address(addr), parent(my_parent) {}

      inline mem_ref operator = ( T val ) {
        parent.write(address,val);
        return *this;
      }

      inline mem_ref operator = ( const mem_ref &val ) { return operator = ((T)val); }

    private:
      ac_int<addr_width,false> address;
      wr1_port<T,size,SYN> &parent;
    };

  public:
    wr1_port( const char *name)
      : reset_chk( name, "call reset()", "access this memory")
      , WCSN(ccs_concat(name,"WCSN"))
      , WA(ccs_concat(name,"WA"))
      , D(ccs_concat(name,"D"))
    {}

#pragma remove_out_reg
#pragma design modulario
    void write (ac_int<addr_width,false> addr, T data=0) {
      reset_chk.test();
      sc_lv<data_width> temp_data;
      type_to_vector(data, (signedtype?true:false), temp_data);
      sc_lv<addr_width> temp_addr;
      type_to_vector(addr, (signedtype?true:false), temp_addr);
      WCSN.write(0);
      WA.write( temp_addr );
      D.write( temp_data );
#pragma unroll
      for (int lcnt=0; lcnt<1; lcnt++) { wait(); }
#if defined(CALYPTO_SC)
      wait(); // Account for unreg outputs for SLEC
#elif !defined(__SYNTHESIS__)
      wait(0.3, SC_NS);  // Account for unreg outputs in simulation
#endif
      WCSN.write(1);
#if !defined(CALYPTO_SC)
      // Return outputs to don't care to save area
      sc_lv<data_width> dc;
      D.write( dc );
      WA.write( dc );
#endif
    }

    void reset() {
      WCSN.write(1);
      WA.write(sc_dt::Log_0);
      D.write(sc_dt::Log_0);
      reset_chk.ok();
    }

    sc_out< bool > WCSN;
    sc_out< sc_lv<addr_width> > WA;
    sc_out< sc_lv<data_width> > D;

    mem_ref operator [] (int index) {
      mem_ref write_ref(*this, index);
      return write_ref;
    }

    template <class C> void bind( C &c ) {
      WCSN(c.WCSN);
      WA(c.WA);
      D(c.D);
    }

    template <class C> void operator() (C &c) {
      bind(c);
    }

    void operator() (mem<T,size,SYN> &m) {
      WCSN(m.wr1_port_instance.WCSN);
      WA(m.wr1_port_instance.WA);
      D(m.wr1_port_instance.D);
    }

  };


  template <class T, unsigned int size>
  class rd0_port<T,size,SYN>
  {
    enum {
      addr_width = nbits<size-1>::val,
      signedtype = mc_typedef_T_traits<T>::issigned,
      data_width = mc_typedef_T_traits<T>::bitwidth
    };
    p2p_checker reset_chk;

    class mem_ref
    {
    public:
      mem_ref( rd0_port<T,size,SYN> &my_parent, ac_int<addr_width,false> addr)
        : address(addr), parent(my_parent) {}

      operator T() const { return parent.read(address); }

      inline mem_ref operator = ( const mem_ref &val ) { return operator = ((T)val); }

    private:
      ac_int<addr_width,false> address;
      rd0_port<T,size,SYN> &parent;
    };

  public:
    rd0_port( const char *name)
      : reset_chk( name, "call reset()", "access this memory")
      , RCSN(ccs_concat(name,"RCSN"))
      , RA(ccs_concat(name,"RA"))
      , Q(ccs_concat(name,"Q"))
    {}

#pragma remove_out_reg
#pragma design modulario
    T read (ac_int<addr_width,false> addr) {
      reset_chk.test();
      sc_lv<addr_width> temp_addr;
      type_to_vector(addr, (signedtype?true:false), temp_addr);
      RCSN.write(0);
      RA.write( temp_addr );
#pragma unroll
      for (int lcnt=0; lcnt<1; lcnt++) { wait(); }
#if defined(CALYPTO_SC)
      wait(); // Account for unreg outputs for SLEC
#elif !defined(__SYNTHESIS__)
      wait(0.3, SC_NS);  // Account for unreg outputs in simulation
#endif
      RCSN.write(1);
#if !defined(CALYPTO_SC)
      // Return outputs to don't care to save area
      sc_lv<data_width> dc;
      RA.write( dc );
#endif
      T return_data;
      vector_to_type(Q.read(), (signedtype?true:false), &return_data);
      return return_data;
    }

    void reset() {
      RCSN.write(1);
      RA.write(sc_dt::Log_0);
      reset_chk.ok();
    }

    sc_out< bool > RCSN;
    sc_out< sc_lv<addr_width> > RA;
    sc_in< sc_lv<data_width> > Q;

    mem_ref operator [] (int index) {
      mem_ref write_ref(*this, index);
      return write_ref;
    }

    template <class C> void bind( C &c ) {
      RCSN(c.RCSN);
      RA(c.RA);
      Q(c.Q);
    }

    template <class C> void operator() (C &c) {
      bind(c);
    }

    void operator() (mem<T,size,SYN> &m) {
      RCSN(m.rd0_port_instance.RCSN);
      RA(m.rd0_port_instance.RA);
      Q(m.rd0_port_instance.Q);
    }

  };

};

#endif // ifndef __INCLUDED_RAM_1R1W_H__

