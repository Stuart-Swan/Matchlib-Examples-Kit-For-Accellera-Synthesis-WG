

Simple Matchlib model showing Pre-HLS and Post-HLS simulations that demonstrates 
how to do a reliable "context switch" of state within a pipelined DUT.

The term "context switch" is analagous to usage for SW processes running on a single core CPU
that is managed by an operating system.  The OS is responsible for managing the state of each process,
and restoring/saving the state of each as they are allowed to run on the CPU.

In our example the state is restored/saved onto the HW in the DUT, which is a HW pipeline
generated by Catapult HLS.
The pipeline needs to be ramped down and ramped back up again on each context switch
so that the state can be gathered and saved and restored properly.
This is easily achieved by using the SyncChannel synchronization primitive.

Note that the state involved in the context switch can be as large as desired.
Note also that context state can be read into the DUT pipeline, modified as the pipeline
executes, and written out when a context switch occurs.


Steps:

1. Build the SystemC simulation executable by typing:
   make build

2. Run the SC simulation by typing:
   ./sim_sc

3. View the waveforms generated from the SC simulation:
   make view_wave

4. Run Catapult HLS to generate Verilog RTL for DUT:
   catapult -f go_hls.tcl

5. Launch SCVerify / QuestaSim with generated RTL by typing in Catapult command line:
   dofile scverify.tcl

6. Run RTL Sim by typing in QuestaSim command line:
   run -all
   wave zoom full

7. View the RTL simulation waveforms and compare to SC waveforms before HLS synthesis

8. Delete all generated files
    make clean
